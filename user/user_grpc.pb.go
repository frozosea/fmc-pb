// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	AddContainerToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddBillNumberToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteContainersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBillNumbersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllContainersResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddContainerToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/AddContainerToAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddBillNumberToAccount(ctx context.Context, in *AddContainerToAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/AddBillNumberToAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteContainersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/DeleteContainersFromAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteBillNumbersFromAccount(ctx context.Context, in *DeleteContainersFromAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.User/DeleteBillNumbersFromAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllContainersResponse, error) {
	out := new(GetAllContainersResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	AddContainerToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error)
	AddBillNumberToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error)
	DeleteContainersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error)
	DeleteBillNumbersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error)
	GetAll(context.Context, *emptypb.Empty) (*GetAllContainersResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddContainerToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContainerToAccount not implemented")
}
func (UnimplementedUserServer) AddBillNumberToAccount(context.Context, *AddContainerToAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBillNumberToAccount not implemented")
}
func (UnimplementedUserServer) DeleteContainersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainersFromAccount not implemented")
}
func (UnimplementedUserServer) DeleteBillNumbersFromAccount(context.Context, *DeleteContainersFromAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBillNumbersFromAccount not implemented")
}
func (UnimplementedUserServer) GetAll(context.Context, *emptypb.Empty) (*GetAllContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddContainerToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddContainerToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AddContainerToAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddContainerToAccount(ctx, req.(*AddContainerToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddBillNumberToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddBillNumberToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AddBillNumberToAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddBillNumberToAccount(ctx, req.(*AddContainerToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteContainersFromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainersFromAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteContainersFromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DeleteContainersFromAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteContainersFromAccount(ctx, req.(*DeleteContainersFromAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteBillNumbersFromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainersFromAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteBillNumbersFromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DeleteBillNumbersFromAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteBillNumbersFromAccount(ctx, req.(*DeleteContainersFromAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddContainerToAccount",
			Handler:    _User_AddContainerToAccount_Handler,
		},
		{
			MethodName: "AddBillNumberToAccount",
			Handler:    _User_AddBillNumberToAccount_Handler,
		},
		{
			MethodName: "DeleteContainersFromAccount",
			Handler:    _User_DeleteContainersFromAccount_Handler,
		},
		{
			MethodName: "DeleteBillNumbersFromAccount",
			Handler:    _User_DeleteBillNumbersFromAccount_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _User_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// UserFeedbackClient is the client API for UserFeedback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFeedbackClient interface {
	AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userFeedbackClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFeedbackClient(cc grpc.ClientConnInterface) UserFeedbackClient {
	return &userFeedbackClient{cc}
}

func (c *userFeedbackClient) AddFeedback(ctx context.Context, in *AddFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserFeedback/AddFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFeedbackServer is the server API for UserFeedback service.
// All implementations must embed UnimplementedUserFeedbackServer
// for forward compatibility
type UserFeedbackServer interface {
	AddFeedback(context.Context, *AddFeedbackRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserFeedbackServer()
}

// UnimplementedUserFeedbackServer must be embedded to have forward compatible implementations.
type UnimplementedUserFeedbackServer struct {
}

func (UnimplementedUserFeedbackServer) AddFeedback(context.Context, *AddFeedbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedback not implemented")
}
func (UnimplementedUserFeedbackServer) mustEmbedUnimplementedUserFeedbackServer() {}

// UnsafeUserFeedbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFeedbackServer will
// result in compilation errors.
type UnsafeUserFeedbackServer interface {
	mustEmbedUnimplementedUserFeedbackServer()
}

func RegisterUserFeedbackServer(s grpc.ServiceRegistrar, srv UserFeedbackServer) {
	s.RegisterService(&UserFeedback_ServiceDesc, srv)
}

func _UserFeedback_AddFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFeedbackServer).AddFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserFeedback/AddFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFeedbackServer).AddFeedback(ctx, req.(*AddFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFeedback_ServiceDesc is the grpc.ServiceDesc for UserFeedback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFeedback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserFeedback",
	HandlerType: (*UserFeedbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFeedback",
			Handler:    _UserFeedback_AddFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthResponse, error)
	GetUserIdByJwtToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserIdByJwtTokenResponse, error)
	SendRecoveryEmail(ctx context.Context, in *SendRecoveryEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RecoveryUser(ctx context.Context, in *RecoveryUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Auth/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/user.Auth/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/user.Auth/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Auth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/user.Auth/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserIdByJwtToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserIdByJwtTokenResponse, error) {
	out := new(GetUserIdByJwtTokenResponse)
	err := c.cc.Invoke(ctx, "/user.Auth/GetUserIdByJwtToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SendRecoveryEmail(ctx context.Context, in *SendRecoveryEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Auth/SendRecoveryEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RecoveryUser(ctx context.Context, in *RecoveryUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Auth/RecoveryUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*emptypb.Empty, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error)
	Auth(context.Context, *emptypb.Empty) (*AuthResponse, error)
	GetUserIdByJwtToken(context.Context, *emptypb.Empty) (*GetUserIdByJwtTokenResponse, error)
	SendRecoveryEmail(context.Context, *SendRecoveryEmailRequest) (*emptypb.Empty, error)
	RecoveryUser(context.Context, *RecoveryUserRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) RegisterUser(context.Context, *RegisterUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedAuthServer) LoginUser(context.Context, *LoginUserRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedAuthServer) RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServer) Auth(context.Context, *emptypb.Empty) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServer) GetUserIdByJwtToken(context.Context, *emptypb.Empty) (*GetUserIdByJwtTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByJwtToken not implemented")
}
func (UnimplementedAuthServer) SendRecoveryEmail(context.Context, *SendRecoveryEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRecoveryEmail not implemented")
}
func (UnimplementedAuthServer) RecoveryUser(context.Context, *RecoveryUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoveryUser not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Auth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserIdByJwtToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserIdByJwtToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/GetUserIdByJwtToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserIdByJwtToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SendRecoveryEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRecoveryEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SendRecoveryEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/SendRecoveryEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SendRecoveryEmail(ctx, req.(*SendRecoveryEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RecoveryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RecoveryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Auth/RecoveryUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RecoveryUser(ctx, req.(*RecoveryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _Auth_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Auth_LoginUser_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Auth_Auth_Handler,
		},
		{
			MethodName: "GetUserIdByJwtToken",
			Handler:    _Auth_GetUserIdByJwtToken_Handler,
		},
		{
			MethodName: "SendRecoveryEmail",
			Handler:    _Auth_SendRecoveryEmail_Handler,
		},
		{
			MethodName: "RecoveryUser",
			Handler:    _Auth_RecoveryUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// ScheduleTrackingClient is the client API for ScheduleTracking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleTrackingClient interface {
	MarkBillNoOnTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkContainerIsNotArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkBillIsNotArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkContainerOnTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkContainerWasArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkBillNoWasArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkBillNoWasRemovedFromTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkContainerWasRemovedFromTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckNumberExists(ctx context.Context, in *CheckNumberExistsRequest, opts ...grpc.CallOption) (*CheckNumberExistsResponse, error)
}

type scheduleTrackingClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleTrackingClient(cc grpc.ClientConnInterface) ScheduleTrackingClient {
	return &scheduleTrackingClient{cc}
}

func (c *scheduleTrackingClient) MarkBillNoOnTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkBillNoOnTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) MarkContainerIsNotArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkContainerIsNotArrived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) MarkBillIsNotArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkBillIsNotArrived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) MarkContainerOnTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkContainerOnTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) MarkContainerWasArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkContainerWasArrived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) MarkBillNoWasArrived(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkBillNoWasArrived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) MarkBillNoWasRemovedFromTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkBillNoWasRemovedFromTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) MarkContainerWasRemovedFromTrack(ctx context.Context, in *AddMarkOnTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/MarkContainerWasRemovedFromTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleTrackingClient) CheckNumberExists(ctx context.Context, in *CheckNumberExistsRequest, opts ...grpc.CallOption) (*CheckNumberExistsResponse, error) {
	out := new(CheckNumberExistsResponse)
	err := c.cc.Invoke(ctx, "/user.ScheduleTracking/CheckNumberExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleTrackingServer is the server API for ScheduleTracking service.
// All implementations must embed UnimplementedScheduleTrackingServer
// for forward compatibility
type ScheduleTrackingServer interface {
	MarkBillNoOnTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	MarkContainerIsNotArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	MarkBillIsNotArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	MarkContainerOnTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	MarkContainerWasArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	MarkBillNoWasArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	MarkBillNoWasRemovedFromTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	MarkContainerWasRemovedFromTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error)
	CheckNumberExists(context.Context, *CheckNumberExistsRequest) (*CheckNumberExistsResponse, error)
	mustEmbedUnimplementedScheduleTrackingServer()
}

// UnimplementedScheduleTrackingServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleTrackingServer struct {
}

func (UnimplementedScheduleTrackingServer) MarkBillNoOnTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkBillNoOnTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) MarkContainerIsNotArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkContainerIsNotArrived not implemented")
}
func (UnimplementedScheduleTrackingServer) MarkBillIsNotArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkBillIsNotArrived not implemented")
}
func (UnimplementedScheduleTrackingServer) MarkContainerOnTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkContainerOnTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) MarkContainerWasArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkContainerWasArrived not implemented")
}
func (UnimplementedScheduleTrackingServer) MarkBillNoWasArrived(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkBillNoWasArrived not implemented")
}
func (UnimplementedScheduleTrackingServer) MarkBillNoWasRemovedFromTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkBillNoWasRemovedFromTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) MarkContainerWasRemovedFromTrack(context.Context, *AddMarkOnTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkContainerWasRemovedFromTrack not implemented")
}
func (UnimplementedScheduleTrackingServer) CheckNumberExists(context.Context, *CheckNumberExistsRequest) (*CheckNumberExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNumberExists not implemented")
}
func (UnimplementedScheduleTrackingServer) mustEmbedUnimplementedScheduleTrackingServer() {}

// UnsafeScheduleTrackingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleTrackingServer will
// result in compilation errors.
type UnsafeScheduleTrackingServer interface {
	mustEmbedUnimplementedScheduleTrackingServer()
}

func RegisterScheduleTrackingServer(s grpc.ServiceRegistrar, srv ScheduleTrackingServer) {
	s.RegisterService(&ScheduleTracking_ServiceDesc, srv)
}

func _ScheduleTracking_MarkBillNoOnTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkBillNoOnTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkBillNoOnTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkBillNoOnTrack(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_MarkContainerIsNotArrived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkContainerIsNotArrived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkContainerIsNotArrived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkContainerIsNotArrived(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_MarkBillIsNotArrived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkBillIsNotArrived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkBillIsNotArrived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkBillIsNotArrived(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_MarkContainerOnTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkContainerOnTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkContainerOnTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkContainerOnTrack(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_MarkContainerWasArrived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkContainerWasArrived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkContainerWasArrived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkContainerWasArrived(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_MarkBillNoWasArrived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkBillNoWasArrived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkBillNoWasArrived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkBillNoWasArrived(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_MarkBillNoWasRemovedFromTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkBillNoWasRemovedFromTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkBillNoWasRemovedFromTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkBillNoWasRemovedFromTrack(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_MarkContainerWasRemovedFromTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMarkOnTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).MarkContainerWasRemovedFromTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/MarkContainerWasRemovedFromTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).MarkContainerWasRemovedFromTrack(ctx, req.(*AddMarkOnTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleTracking_CheckNumberExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNumberExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleTrackingServer).CheckNumberExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.ScheduleTracking/CheckNumberExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleTrackingServer).CheckNumberExists(ctx, req.(*CheckNumberExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleTracking_ServiceDesc is the grpc.ServiceDesc for ScheduleTracking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleTracking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.ScheduleTracking",
	HandlerType: (*ScheduleTrackingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarkBillNoOnTrack",
			Handler:    _ScheduleTracking_MarkBillNoOnTrack_Handler,
		},
		{
			MethodName: "MarkContainerIsNotArrived",
			Handler:    _ScheduleTracking_MarkContainerIsNotArrived_Handler,
		},
		{
			MethodName: "MarkBillIsNotArrived",
			Handler:    _ScheduleTracking_MarkBillIsNotArrived_Handler,
		},
		{
			MethodName: "MarkContainerOnTrack",
			Handler:    _ScheduleTracking_MarkContainerOnTrack_Handler,
		},
		{
			MethodName: "MarkContainerWasArrived",
			Handler:    _ScheduleTracking_MarkContainerWasArrived_Handler,
		},
		{
			MethodName: "MarkBillNoWasArrived",
			Handler:    _ScheduleTracking_MarkBillNoWasArrived_Handler,
		},
		{
			MethodName: "MarkBillNoWasRemovedFromTrack",
			Handler:    _ScheduleTracking_MarkBillNoWasRemovedFromTrack_Handler,
		},
		{
			MethodName: "MarkContainerWasRemovedFromTrack",
			Handler:    _ScheduleTracking_MarkContainerWasRemovedFromTrack_Handler,
		},
		{
			MethodName: "CheckNumberExists",
			Handler:    _ScheduleTracking_CheckNumberExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// BalanceClient is the client API for Balance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceClient interface {
	SubOneDayTrackingPriceFromBalance(ctx context.Context, in *SubBalanceServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTariff(ctx context.Context, in *BaseBalanceServiceRequest, opts ...grpc.CallOption) (*GetTariffResponse, error)
	GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceResponse, error)
}

type balanceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceClient(cc grpc.ClientConnInterface) BalanceClient {
	return &balanceClient{cc}
}

func (c *balanceClient) SubOneDayTrackingPriceFromBalance(ctx context.Context, in *SubBalanceServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.Balance/SubOneDayTrackingPriceFromBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) GetTariff(ctx context.Context, in *BaseBalanceServiceRequest, opts ...grpc.CallOption) (*GetTariffResponse, error) {
	out := new(GetTariffResponse)
	err := c.cc.Invoke(ctx, "/user.Balance/GetTariff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceClient) GetBalance(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/user.Balance/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceServer is the server API for Balance service.
// All implementations must embed UnimplementedBalanceServer
// for forward compatibility
type BalanceServer interface {
	SubOneDayTrackingPriceFromBalance(context.Context, *SubBalanceServiceRequest) (*emptypb.Empty, error)
	GetTariff(context.Context, *BaseBalanceServiceRequest) (*GetTariffResponse, error)
	GetBalance(context.Context, *emptypb.Empty) (*GetBalanceResponse, error)
	mustEmbedUnimplementedBalanceServer()
}

// UnimplementedBalanceServer must be embedded to have forward compatible implementations.
type UnimplementedBalanceServer struct {
}

func (UnimplementedBalanceServer) SubOneDayTrackingPriceFromBalance(context.Context, *SubBalanceServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubOneDayTrackingPriceFromBalance not implemented")
}
func (UnimplementedBalanceServer) GetTariff(context.Context, *BaseBalanceServiceRequest) (*GetTariffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTariff not implemented")
}
func (UnimplementedBalanceServer) GetBalance(context.Context, *emptypb.Empty) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBalanceServer) mustEmbedUnimplementedBalanceServer() {}

// UnsafeBalanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceServer will
// result in compilation errors.
type UnsafeBalanceServer interface {
	mustEmbedUnimplementedBalanceServer()
}

func RegisterBalanceServer(s grpc.ServiceRegistrar, srv BalanceServer) {
	s.RegisterService(&Balance_ServiceDesc, srv)
}

func _Balance_SubOneDayTrackingPriceFromBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubBalanceServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).SubOneDayTrackingPriceFromBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Balance/SubOneDayTrackingPriceFromBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).SubOneDayTrackingPriceFromBalance(ctx, req.(*SubBalanceServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_GetTariff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseBalanceServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).GetTariff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Balance/GetTariff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).GetTariff(ctx, req.(*BaseBalanceServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Balance_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Balance/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServer).GetBalance(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Balance_ServiceDesc is the grpc.ServiceDesc for Balance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Balance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Balance",
	HandlerType: (*BalanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubOneDayTrackingPriceFromBalance",
			Handler:    _Balance_SubOneDayTrackingPriceFromBalance_Handler,
		},
		{
			MethodName: "GetTariff",
			Handler:    _Balance_GetTariff_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Balance_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
