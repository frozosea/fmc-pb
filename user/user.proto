syntax = "proto3";
package user;
import "google/protobuf/empty.proto";
import "google/api/annotation.proto";
option go_package = ".";

service User{

  rpc AddContainerToAccount(AddContainerToAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/containers"
      body: "*"
    };
  };

  rpc AddBillNumberToAccount(AddContainerToAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/bills"
      body: "*"
    };
  };

  rpc DeleteContainersFromAccount(DeleteContainersFromAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/containers"
      body: "*"
    };
  };

  rpc DeleteBillNumbersFromAccount(DeleteContainersFromAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/bills"
      body: "*"
    };
  };

  rpc GetAll(google.protobuf.Empty) returns (GetAllContainersResponse) {
    option (google.api.http) = {
      get: "/user/all"
    };
  };
}

service UserFeedback{
  rpc AddFeedback(AddFeedbackRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/feedback",
      body: "*"
    };
  };
}

message Container{
  string number = 1;
}
message AddContainerToAccountRequest{
  repeated Container container = 1;
  //  string user_id = 2;
}
message DeleteContainersFromAccountRequest{
  //  int64 user_id = 1;
  repeated string numbers = 2;
}
message GetAllContainersFromAccountRequest{
  //  int64 user_id = 1;
}
message ScheduleTrackingObject{
  string time = 1;
  repeated string emails = 2;
  string subject = 3;
}
message ContainerResponse{
  string number = 1;
  bool is_on_track = 2;
  bool is_container = 3;
  ScheduleTrackingObject scheduleTrackingObject = 4;
}
message GetAllContainersResponse{
  repeated ContainerResponse bill_numbers = 1;
  repeated ContainerResponse containers = 2;
}
message GetInfoAboutUserResponse{
  string username = 1;
  GetAllContainersResponse all_containers = 2;
}
service Auth{

  rpc RegisterUser(RegisterUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/auth/register"
      body: "*"
    };
  };

  rpc LoginUser(LoginUserRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/auth/login"
      body: "*"
    };
  };

  rpc RefreshToken(RefreshTokenRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/auth/refresh"
      body: "*"
    };
  };

  rpc Auth(google.protobuf.Empty) returns (AuthResponse) {
    option (google.api.http) = {
      post: "/auth/access"
      body: "*"
    };
  };

  rpc GetUserIdByJwtToken(google.protobuf.Empty) returns (GetUserIdByJwtTokenResponse) {
    option (google.api.http) = {
      post: "/auth/user"
      body: "*"
    };
  };

  rpc SendRecoveryEmail(SendRecoveryEmailRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/auth/remind"
      body: "*"
    };
  };

  rpc RecoveryUser(RecoveryUserRequest)returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/auth/recovery"
      body: "*"
    };
  };
}
message RegisterUserRequest{
  string email = 1;
  string username = 2;
  string password = 3;
  string company_full_name = 4;
  string company_abbreviated_name = 5;
  string inn = 6;
  string ogrn = 7;
  string legal_address = 8;
  string post_address = 9;
  string work_email = 10;
}

message LoginUserRequest{
  string email = 1;
  string password = 2;
}
message LoginResponse{
  string tokens = 1;
  string refresh_token = 2;
  int64 token_expires = 3;
  int64 refresh_token_expires = 4;
}
message RefreshTokenRequest{
  string refresh_token = 1;
}
message AuthRequest{
  string token = 1;
}
message AuthResponse{
  bool success = 1;
}
message GetUserIdByJwtTokenRequest{
  string token = 1;
}
message GetUserIdByJwtTokenResponse{
  bool success = 1;
  int64 user_id = 2;
}
service ScheduleTracking{
  rpc MarkBillNoOnTrack(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc MarkContainerIsNotArrived(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc MarkBillIsNotArrived(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc MarkContainerOnTrack(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc MarkContainerWasArrived(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc MarkBillNoWasArrived(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc MarkBillNoWasRemovedFromTrack(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc MarkContainerWasRemovedFromTrack(AddMarkOnTrackingRequest) returns (google.protobuf.Empty) {};
  rpc CheckNumberExists(CheckNumberExistsRequest) returns (CheckNumberExistsResponse) {};
}
message AddMarkOnTrackingRequest{
  string number = 2;
  int64 user_id = 3;
}
message CheckNumberExistsRequest{
  string number = 1;
  int64 user_id = 3;
  bool is_container = 4;
}
message CheckNumberExistsResponse{
  bool exists = 1;
}

message AddFeedbackRequest{
  string email = 1;
  string message = 2;
}

message SendRecoveryEmailRequest{
  string email = 1;
}
message RecoveryUserRequest{
  string token = 1;
  string password = 2;
}

service Balance{
  rpc SubOneDayTrackingPriceFromBalance(SubBalanceServiceRequest) returns (google.protobuf.Empty) {};
  rpc GetTariff(google.protobuf.Empty) returns (GetTariffResponse) {
    option (google.api.http) = {
      post: "/user/tariff"
      body: "*"
    };
  };
  rpc GetBalance(google.protobuf.Empty) returns (GetBalanceResponse) {
    option (google.api.http) = {
      get: "/user/balance"
    };
  };
  rpc CheckAccessToPaidTracking(CheckAccessToPaidTrackingRequest) returns (CheckAccessToPaidTrackingResponse) {};

}
message CheckAccessToPaidTrackingRequest{
  int64 user_id = 1;
}
message CheckAccessToPaidTrackingResponse{
  bool has_access = 1;
}
message SubBalanceServiceRequest{
  int64 user_id = 1;
  string number = 2;
}
message GetTariffResponse{
  float one_day_tracking_price = 1;
  int64 numbers_on_track = 2;
}
message GetBalanceResponse{
  float balance = 1;
}