// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: freight.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FreightServiceClient is the client API for FreightService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreightServiceClient interface {
	GetFreights(ctx context.Context, in *GetFreightRequest, opts ...grpc.CallOption) (*GetFreightsResponseList, error)
}

type freightServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreightServiceClient(cc grpc.ClientConnInterface) FreightServiceClient {
	return &freightServiceClient{cc}
}

func (c *freightServiceClient) GetFreights(ctx context.Context, in *GetFreightRequest, opts ...grpc.CallOption) (*GetFreightsResponseList, error) {
	out := new(GetFreightsResponseList)
	err := c.cc.Invoke(ctx, "/proto_freight.FreightService/GetFreights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreightServiceServer is the server API for FreightService service.
// All implementations must embed UnimplementedFreightServiceServer
// for forward compatibility
type FreightServiceServer interface {
	GetFreights(context.Context, *GetFreightRequest) (*GetFreightsResponseList, error)
	mustEmbedUnimplementedFreightServiceServer()
}

// UnimplementedFreightServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFreightServiceServer struct {
}

func (UnimplementedFreightServiceServer) GetFreights(context.Context, *GetFreightRequest) (*GetFreightsResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreights not implemented")
}
func (UnimplementedFreightServiceServer) mustEmbedUnimplementedFreightServiceServer() {}

// UnsafeFreightServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreightServiceServer will
// result in compilation errors.
type UnsafeFreightServiceServer interface {
	mustEmbedUnimplementedFreightServiceServer()
}

func RegisterFreightServiceServer(s grpc.ServiceRegistrar, srv FreightServiceServer) {
	s.RegisterService(&FreightService_ServiceDesc, srv)
}

func _FreightService_GetFreights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFreightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreightServiceServer).GetFreights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_freight.FreightService/GetFreights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreightServiceServer).GetFreights(ctx, req.(*GetFreightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FreightService_ServiceDesc is the grpc.ServiceDesc for FreightService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreightService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_freight.FreightService",
	HandlerType: (*FreightServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFreights",
			Handler:    _FreightService_GetFreights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freight.proto",
}

// CityServiceClient is the client API for CityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CityServiceClient interface {
	GetAllCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCitiesResponse, error)
}

type cityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCityServiceClient(cc grpc.ClientConnInterface) CityServiceClient {
	return &cityServiceClient{cc}
}

func (c *cityServiceClient) GetAllCities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCitiesResponse, error) {
	out := new(GetAllCitiesResponse)
	err := c.cc.Invoke(ctx, "/proto_freight.CityService/GetAllCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CityServiceServer is the server API for CityService service.
// All implementations must embed UnimplementedCityServiceServer
// for forward compatibility
type CityServiceServer interface {
	GetAllCities(context.Context, *emptypb.Empty) (*GetAllCitiesResponse, error)
	mustEmbedUnimplementedCityServiceServer()
}

// UnimplementedCityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCityServiceServer struct {
}

func (UnimplementedCityServiceServer) GetAllCities(context.Context, *emptypb.Empty) (*GetAllCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCities not implemented")
}
func (UnimplementedCityServiceServer) mustEmbedUnimplementedCityServiceServer() {}

// UnsafeCityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CityServiceServer will
// result in compilation errors.
type UnsafeCityServiceServer interface {
	mustEmbedUnimplementedCityServiceServer()
}

func RegisterCityServiceServer(s grpc.ServiceRegistrar, srv CityServiceServer) {
	s.RegisterService(&CityService_ServiceDesc, srv)
}

func _CityService_GetAllCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CityServiceServer).GetAllCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_freight.CityService/GetAllCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CityServiceServer).GetAllCities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CityService_ServiceDesc is the grpc.ServiceDesc for CityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_freight.CityService",
	HandlerType: (*CityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCities",
			Handler:    _CityService_GetAllCities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freight.proto",
}

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	GetAllCompanies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCompainesResponse, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) GetAllCompanies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllCompainesResponse, error) {
	out := new(GetAllCompainesResponse)
	err := c.cc.Invoke(ctx, "/proto_freight.CompanyService/GetAllCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	GetAllCompanies(context.Context, *emptypb.Empty) (*GetAllCompainesResponse, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) GetAllCompanies(context.Context, *emptypb.Empty) (*GetAllCompainesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCompanies not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_GetAllCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAllCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_freight.CompanyService/GetAllCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAllCompanies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_freight.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCompanies",
			Handler:    _CompanyService_GetAllCompanies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freight.proto",
}

// ContainersServiceClient is the client API for ContainersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainersServiceClient interface {
	GetAllContainers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllContainersResponse, error)
}

type containersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainersServiceClient(cc grpc.ClientConnInterface) ContainersServiceClient {
	return &containersServiceClient{cc}
}

func (c *containersServiceClient) GetAllContainers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllContainersResponse, error) {
	out := new(GetAllContainersResponse)
	err := c.cc.Invoke(ctx, "/proto_freight.ContainersService/GetAllContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainersServiceServer is the server API for ContainersService service.
// All implementations must embed UnimplementedContainersServiceServer
// for forward compatibility
type ContainersServiceServer interface {
	GetAllContainers(context.Context, *emptypb.Empty) (*GetAllContainersResponse, error)
	mustEmbedUnimplementedContainersServiceServer()
}

// UnimplementedContainersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainersServiceServer struct {
}

func (UnimplementedContainersServiceServer) GetAllContainers(context.Context, *emptypb.Empty) (*GetAllContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllContainers not implemented")
}
func (UnimplementedContainersServiceServer) mustEmbedUnimplementedContainersServiceServer() {}

// UnsafeContainersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainersServiceServer will
// result in compilation errors.
type UnsafeContainersServiceServer interface {
	mustEmbedUnimplementedContainersServiceServer()
}

func RegisterContainersServiceServer(s grpc.ServiceRegistrar, srv ContainersServiceServer) {
	s.RegisterService(&ContainersService_ServiceDesc, srv)
}

func _ContainersService_GetAllContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServiceServer).GetAllContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_freight.ContainersService/GetAllContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServiceServer).GetAllContainers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainersService_ServiceDesc is the grpc.ServiceDesc for ContainersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_freight.ContainersService",
	HandlerType: (*ContainersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllContainers",
			Handler:    _ContainersService_GetAllContainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "freight.proto",
}
